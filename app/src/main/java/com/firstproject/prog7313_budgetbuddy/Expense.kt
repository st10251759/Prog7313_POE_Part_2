package com.firstproject.prog7313_budgetbuddy.data.entities

/*
 --------------------------------Project Details----------------------------------
 STUDENT NUMBERS: ST10251759   | ST10252746      | ST10266994
 STUDENT NAMES: Cameron Chetty | Theshara Narain | Alyssia Sookdeo
 COURSE: BCAD Year 3
 MODULE: Programming 3C
 MODULE CODE: PROG7313
 ASSESSMENT: Portfolio of Evidence (POE) Part 2
 Github REPO LINK: https://github.com/st10251759/Prog7313_POE_Part_2
 --------------------------------Project Details----------------------------------
*/

/*
 --------------------------------Code Attribution----------------------------------
 Title: Save data in a local database using Room  |  App data and files  |  Android Developers
 Author: Android Developer
 Date Published: 2019
 Date Accessed: 17 April 2025
 Code Version: v21.20
 Availability: https://developer.android.com/training/data-storage/room
  --------------------------------Code Attribution----------------------------------
*/

//Imports
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Index
import androidx.room.PrimaryKey
import java.util.Date

// This defines a Room entity representing an "expenses" table in the database.
@Entity(
    tableName = "expenses",
    foreignKeys = [
        ForeignKey(
            entity = Category::class,             // Reference the Category entity
            parentColumns = ["categoryId"],       // Parent key in the Category table
            childColumns = ["categoryId"],        // Child key in this Expense table
            onDelete = ForeignKey.SET_NULL        // Set categoryId to null if the referenced category is deleted
        )
    ],
    indices = [Index("userId"), Index("categoryId")] // Indexes for faster lookups on userId and categoryId
)
data class Expense(
    @PrimaryKey(autoGenerate = true)
    val expenseId: Int = 0,              // Unique ID for each expense, auto-generated by Room
    val userId: String,                  // User identifier (Firebase UID for uniqueness across users)
    val categoryId: Int?,                // Optional category ID (nullable to allow SET_NULL on delete)
    val expenseDate: Date,              // Date the expense occurred
    val startTime: String? = null,       // Optional start time (e.g. for timed sessions or durations)
    val endTime: String? = null,         // Optional end time
    val category: String,               // Name of the category (denormalized for quick access/display)
    val description: String,            // Description of the expense
    val totalAmount: Double,            // Total amount spent
    val photoId: String? = null         // Optional ID of the photo associated with this expense
)
